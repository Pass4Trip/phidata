from typing import Optional
from phi.agent import Agent
from phi.model.openai import OpenAIChat
from phi.tools.googlesearch import GoogleSearch
from agents.settings import agent_settings
import os
import logging
from dotenv import load_dotenv
from db.url import get_db_url
from phi.storage.agent.postgres import PgAgentStorage
from phi.agent import AgentMemory
from phi.memory.db.postgres import PgMemoryDb
from utils.colored_logging import get_colored_logger

# Charger les variables d'environnement
load_dotenv()

# Configuration du logger
logger = get_colored_logger('agents.web', 'WebAgent', level=logging.INFO)

db_url = get_db_url()

web_searcher_storage = PgAgentStorage(table_name="web_searcher_sessions", db_url=db_url)

class EnhancedWebSearchTool(GoogleSearch):
    """
    Outil de recherche web am√©lior√© bas√© sur Google Search
    """
    def web_search(
        self, 
        query: str, 
        max_results: int = 5,
        language: str = 'en'
    ) -> str:
        """
        Recherche web avec gestion des erreurs am√©lior√©e
        """
        # Log color√© pour indiquer la prise en charge de la demande
        logger.info("üåê Agent Web pr√™t √† traiter les requ√™tes de recherche web")
        
        try:
            logger.info(f"Recherche web pour la requ√™te : {query}")
            results = self.google_search(query=query, max_results=max_results, language=language)
            logger.debug(f"R√©sultats de recherche obtenus : {len(results)} r√©sultats")
            return results
        except Exception as e:
            logger.error(f"Erreur lors de la recherche web : {e}")
            return f"Erreur de recherche : {e}. Impossible de r√©cup√©rer les r√©sultats."

def get_web_searcher(
    model_id: Optional[str] = None,
    storage: Optional[PgAgentStorage] = web_searcher_storage,
    memory: Optional[AgentMemory] = None,
    user_id: Optional[str] = None,
    session_id: Optional[str] = None,
    debug_mode: bool = False,
) -> Agent:
    # V√©rifier si la cl√© API est d√©finie
    if not os.getenv('OPENAI_API_KEY'):
        raise ValueError("La cl√© API OpenAI n'est pas d√©finie. Veuillez d√©finir OPENAI_API_KEY dans votre fichier .env.")

    # R√©cup√©rer l'URL de base de donn√©es (optionnel)
    if db_url:
        logger.debug(f"URL de base de donn√©es configur√©e : {db_url}")

    web_agent = Agent(
        name="Web Search Agent",
        agent_id="web-searcher",
        session_id=session_id,
        user_id=user_id,
        # The model to use for the agent
        model=OpenAIChat(
            id=model_id or agent_settings.gpt_4,
            max_tokens=agent_settings.default_max_completion_tokens,
            temperature=agent_settings.default_temperature,
        ),
        role="Tu es un agent d'une Team qui dispose des capacit√©s √† rechercher des informations sur le Web. Tu dois renvoyer tes r√©sultats √† Agent Leader",  
        instructions=[
            "Perform web searches to find the most relevant and up-to-date information",
            "Always include sources for the information",
            "Provide clear and concise summaries",
            "",
            "Tu es un agent intelligent avec des capacit√©s de recherche web.",
            "Utilise le moteur de recherche Google UNIQUEMENT si :",
            " - La r√©ponse n√©cessite des informations actuelles ou r√©centes",
            " - La question demande explicitement une recherche web",
            " - Tes connaissances actuelles sont insuffisantes pour r√©pondre pr√©cis√©ment",
            "",
            "√âtapes de r√©solution :",
            "1. √âvalue d'abord si une recherche web est vraiment n√©cessaire",
            "2. Si oui, d√©compose la question en requ√™tes de recherche pertinentes",
            "3. Analyse les r√©sultats avec esprit critique",
            "",
            "R√®gles importantes :",
            " - Privil√©gie toujours la qualit√© et la pr√©cision des sources",
            " - Si aucune information pertinente n'est trouv√©e, explique-le clairement",
            " - Garde tes r√©ponses concises et instructives",
            " - En cas d'√©chec de recherche, utilise tes connaissances existantes",
            " - TOUJOURS mentionner explicitement les informations de contexte utilisateur utilis√©es",
            "   * Citer les d√©tails sp√©cifiques de l'environnement ou des pr√©f√©rences",
            "   * Expliquer comment ces informations ont influenc√© ta r√©ponse",
        ],
        tools=[EnhancedWebSearchTool()],
        add_datetime_to_instructions=True,
        markdown=True,
        # Show tool calls in the response
        show_tool_calls=True,
        # Enable monitoring on phidata.app
        monitoring=True,
        # Show debug logs
        debug_mode=debug_mode,
        # Store agent sessions in the database
        storage=storage,

        memory=AgentMemory(
            db=PgMemoryDb(table_name="web_searcher__memory", db_url=db_url), 
            create_user_memories=True, 
            create_session_summary=True
        ),
        stream=False,  # D√©sactiver le streaming
    )

    def web_search(query):
        """
        M√©thode utilitaire pour effectuer une recherche web
        """
        return web_agent.print_response(query, stream=False)

    return web_agent