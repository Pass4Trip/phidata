import json
import os
import sys 
from typing import List, Optional

# Ajouter le chemin du module logging standard Python avant les imports
sys.path.insert(0, os.path.dirname(os.__file__))
import logging

from dotenv import load_dotenv

# Import correct de PgMemoryDb
from phi.memory.db.postgres import PgMemoryDb
from phi.memory.agent import AgentMemory
from phi.memory.memory import Memory

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Charger les variables d'environnement
load_dotenv()

# Construction dynamique de l'URL de base de donn√©es PostgreSQL
def build_postgres_url() -> str:
    """
    Construire dynamiquement l'URL de connexion PostgreSQL √† partir des variables d'environnement
    
    Returns:
        str: URL de connexion PostgreSQL
    """
    # R√©cup√©rer les param√®tres de connexion depuis les variables d'environnement
    db_host = os.getenv('DB_HOST', 'vps-af24e24d.vps.ovh.net')
    db_port = os.getenv('DB_PORT', '30030')
    db_name = os.getenv('DB_NAME', 'myboun')
    db_user = os.getenv('DB_USER', 'p4t')
    db_password = os.getenv('DB_PASSWORD', '')
    db_schema = os.getenv('DB_SCHEMA', 'ai')
    
    # Construire l'URL de connexion PostgreSQL avec le sch√©ma
    db_url = f'postgresql+psycopg2://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}?options=-c%20search_path%3D{db_schema}'
    
    return db_url

# G√©n√©rer l'URL de base de donn√©es
db_url = build_postgres_url()

def get_user_preferences(
    query: str,
    user_id: str, 
    db_url: Optional[str] = None, 
    table_name: str = "user_proxy_memories"
) -> str:
    """
    Enrichit une requ√™te en utilisant les m√©moires de l'utilisateur.
    
    Args:
        query (str): Requ√™te originale
        user_id (str): Identifiant de l'utilisateur
        db_url (Optional[str]): URL de connexion √† la base de donn√©es PostgreSQL
        table_name (str): Nom de la table de m√©moire
    
    Returns:
        str: Requ√™te enrichie avec les pr√©f√©rences de l'utilisateur
    """
    # Utiliser l'URL de base de donn√©es globale si non fournie
    if db_url is None:
        db_url = globals().get('db_url')
    
    if not db_url:
        logger.error("Aucune URL de base de donn√©es fournie.")
        return query
    
    try:
        # Cr√©er une m√©moire d'agent avec la base de donn√©es PostgreSQL
        agent_memory = AgentMemory(
            db=PgMemoryDb(
                table_name=table_name, 
                db_url=db_url
            ),
            # D√©finir l'ID utilisateur
            user_id=user_id
        )
        
        # Charger les m√©moires de l'utilisateur
        memories = agent_memory.db.read_memories(user_id=user_id)
        
        print(f"\nüîç Nombre de m√©moires trouv√©es : {len(memories)}")
        
        # Stocker les m√©moires utilisateur
        user_memories = []
        
        # Parcourir toutes les m√©moires
        for memory in memories:
            try:
                memory_content = None
                
                if isinstance(memory.memory, dict):
                    memory_content = memory.memory.get('memory')
                elif isinstance(memory.memory, str):
                    try:
                        memory_dict = json.loads(memory.memory)
                        memory_content = memory_dict.get('memory')
                    except json.JSONDecodeError:
                        memory_content = memory.memory
                else:
                    memory_content = str(memory.memory)
                
                if memory_content:
                    user_memories.append(memory_content)
            
            except Exception as e:
                print(f"‚ùå Erreur lors du traitement de la m√©moire : {e}")
                pass
        
        print(f"\nüìã Nombre de m√©moires extraites : {len(user_memories)}")
        
        # Si aucune m√©moire, retourner la requ√™te originale
        if not user_memories:
            return query
        
        # Utiliser le mod√®le LLM pour enrichir la requ√™te
        from phi.agent import Agent
        from phi.llm.openai import OpenAIChat
        
        enrichment_agent = Agent(
            llm=OpenAIChat(model="gpt-4o-mini"),
            instructions=[
                "Tu es un assistant sp√©cialis√© dans l'enrichissement de requ√™tes.",
                "R√®gles strictes :",
                "1. Comprendre le contexte et les pr√©f√©rences pertinentes de l'utilisateur",
                "2. Enrichir la requ√™te UNIQUEMENT avec des informations g√©n√©rales et personnelles",
                "3. INTERDICTION ABSOLUE d'ajouter des lieux sp√©cifiques non mentionn√©s dans la requ√™te originale",
                "4. Garder l'intention originale de la requ√™te intacte",
                "5. Ignorer les informations non pertinentes ou obsol√®tes",
                "6. R√©pondre UNIQUEMENT par la requ√™te enrichie, sans aucun autre texte",
                "7. Assurer que l'enrichissement apporte une r√©elle valeur ajout√©e",
                "8. Ne jamais inventer ou ajouter des informations fictives",
                "9. Si aucun enrichissement pertinent n'est possible, retourner la requ√™te originale"
            ]
        )
        
        # Pr√©parer le contexte des m√©moires
        memories_context = "\n".join(user_memories)
        
        # Enrichir la requ√™te
        enriched_query = enrichment_agent.run(
            f"""
            M√©moires pr√©c√©dentes de l'utilisateur :
            {memories_context}
            
            Requ√™te originale :
            {query}
            
            Instructions :
            - Enrichis la requ√™te SANS ajouter de lieux sp√©cifiques
            - Utilise uniquement les informations g√©n√©rales des m√©moires
            - Ne modifie pas la structure de base de la requ√™te
            """
        )
        
        # Extraction directe du contenu
        if isinstance(enriched_query, str):
            print("\nüöÄ Requ√™te enrichie :")
            print(enriched_query)
            return enriched_query
        
        # Extraction si c'est un objet avec un attribut 'content'
        if hasattr(enriched_query, 'content'):
            print("\nüöÄ Requ√™te enrichie :")
            print(enriched_query.content)
            return enriched_query.content
        
        # Dernier recours
        print("\nüöÄ Requ√™te non enrichie, utilisation de la requ√™te originale")
        return query
    
    except Exception as e:
        logger.error(f"Erreur lors de l'enrichissement de la requ√™te : {e}")
        return query

# Exemple d'utilisation
def example_usage():
    # R√©cup√©rer l'URL de la base de donn√©es depuis une variable d'environnement
    db_url = os.getenv('DATABASE_URL', 'postgresql://user:password@localhost/dbname')
    
    # Cr√©er un gestionnaire de pr√©f√©rences
    try:
        # R√©cup√©rer les pr√©f√©rences
        query = "Je cherche un restaurant pour ce week end ?"
        enriched_query = get_user_preferences(query, user_id="vinh")
        
        # Si aucune pr√©f√©rence n'est trouv√©e, afficher un message
        if not enriched_query:
            print("Aucune pr√©f√©rence trouv√©e.")
    
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration des pr√©f√©rences : {e}")

if __name__ == "__main__":
    example_usage()
